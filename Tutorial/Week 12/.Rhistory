rm(list=ls()) # Clear the Environment / History
set.seed(135343466) # <- fix the seed so the results are reproducible!
library(TSA)
set.seed(135343466) # <- fix the seed so the results are reproducible!
library(TSA)
# (a) Load in and plot the time series dataset. Does this data appear to come from a
# stationary process? Why or why not?
data(color)
plot(color, type='l', ylab="color")
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR2.model = ar(color, order.max=2, AIC=F, method='mle')
AR2.model
AR2.model
# Estimate of mu
AR2.model$x.mean
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR2.model = ar(color, order.max=1, AIC=F, method='mle')
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.max=1, AIC=F, method='mle')
AR1.model
# Estimate of mu
AR1.model$x.mean
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.max=1, AIC=F, method='mle')
AR1.model
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.max=2, AIC=F, method='mle')
AR1.model
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.max=1, AIC=F, method='mle')
AR1.model
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.min=2, AIC=F, method='mle')
AR1.model
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.min=2, AIC=F, method='mle')
AR1.model
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.min=5, AIC=F, method='mle')
AR1.model
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model = ar(color, order.max=1, AIC=F, method='mle')
AR1.model
AR1.model
# 1. (2 marks) The color dataset in the TSA package gives the values of a colour property
# from 35 consecutive batches in an industrial process. Suppose we decide to fit an AR(1)
# model to this dataset.
data(color)
# (a) Fit the AR(1) model to this dataset, using the Maximum Likelihood Estimation
# approach within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "mle" in the ar( ) function.)
AR1.model.MLE = ar(color, order.max=1, AIC=F, method='mle')
AR1.model.MLE
# Estimate of mu
AR1.model.MLE$x.mean
# 2. (3 marks)
# (a) Fit the AR(1) model to the color dataset, using the Method of Moments approach
# within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "yw" in the ar( ) function. This
#   stands for \Yule-Walker", because the Yule-Walker equations need to be solved to
# get the MOM parameter estimates.)
AR1.model.YW = ar(color, order.max=1, AIC=F, method='yw')
AR1.model.YW
# Estimate of mu
AR1.model.YW$x.mean
# Estimate of mu
AR1.model.YW$x.mean
# 2. (3 marks)
# (a) Fit the AR(1) model to the color dataset, using the Method of Moments approach
# within the ar() function. Give the estimates of PI and MU.
# (Hint: We will need the argument method= "yw" in the ar( ) function. This
#   stands for \Yule-Walker", because the Yule-Walker equations need to be solved to
# get the MOM parameter estimates.)
AR1.model.YW = ar(color, order.max=1, AIC=F, method='yw')
AR1.model.YW
# Estimate of mu
AR1.model.YW$x.mean
# (b) Using equation(s) we have learned about in Video 29, obtain an estimate of the
# process variance r_0.
# (Hint: You may have to explore a bit to find a function in R that can give you the
#   sample variance of a dataset.)
gamma_0 <- var(color)
gamma_0
# (c) Using the above results, and equation(s) we have learned about in Video 29,
# obtain an estimate of the white noise variance 2
# e .
# (Hint: If you need some sample correlations from the dataset: For any dataset
#   mydata , the vector of rk-values is given by acf( mydata) $acf .)
mean(AR2.LS.model1$resid^2, na.rm = T)
# (c) Using the above results, and equation(s) we have learned about in Video 29,
# obtain an estimate of the white noise variance 2
# e .
# (Hint: If you need some sample correlations from the dataset: For any dataset
#   mydata , the vector of rk-values is given by acf( mydata) $acf .)
mean(AR1.model.YW$resid^2, na.rm = T)
